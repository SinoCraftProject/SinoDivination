plugins {
    id 'eclipse'
    id 'maven-publish'
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "0.12.0-SNAPSHOT" apply false
}

apply plugin: 'java'
apply plugin: 'architectury-plugin'   // Parchment mappings.
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'maven-publish'
apply plugin: 'dev.architectury.loom'

version = '1.18.2-1.0.1'
group = 'games.moegirl.sinocraft.sinodivination' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'sinodivination'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    silentMojangMappingsLicense()

    forge {
        dataGen {
            mod 'sinodivination'
        }
        mixinConfig "sinodivination.mixins.json"
    }

    launches {
        data {
            arg "--existing", file("src/main/resources").absolutePath
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }

    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }

    maven { url 'https://jitpack.io' }

    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }

    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    minecraft "com.mojang:minecraft:1.18.2"
    forge "net.minecraftforge:forge:1.18.2-40.1.0"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.18.2:2022.05.22@zip")
    }

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    modCompileOnly 'com.github.SinoCraftProject:SinoCore:main-SNAPSHOT:api'
    modRuntimeOnly 'com.github.SinoCraftProject:SinoCore:main-SNAPSHOT'
    // qyl27: Remove JEI because it was inherited from SinoCore.
    modImplementation 'curse.maven:the-one-probe-245211:3671753'
    modRuntimeOnly 'curse.maven:appleskin-248787:3686482'
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "sinodivination",
                "Specification-Vendor"    : "SinoCraft Project Team",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "MoeGirl Games",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "sinodivination.mixins.json"
        ])
    }
}

// Why????
tasks['processResources'].configure {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
